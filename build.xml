<?xml version="1.0"?>
<project name="tinytlf" basedir="." default="build-components">
    <!-- set up a prefix for all environment variables -->
    <property environment="env."/>
    <!-- System environment must contain FLEX_HOME variable that points to Flex SDK -->
    <property name="FLEX_HOME" location="${env.FLEX_HOME}"/>
    <!-- identify properties file -->
    <property file="build.properties"/>
    <!-- Set up FlexUnit Ant tasks -->
    <taskdef resource="flexUnitTasks.tasks" classpath="${lib.loc}/flexUnitTasks.jar"/>
    <target name="usage">
        <echo message=""/>
        <echo message="tinytlf Build Usage"/>
        <echo message="-----------------------------------"/>
        <echo message=""/>
        <echo message="Available targets are:"/>
        <echo message=""/>
        <echo message="test              --&gt; Build tinytlf SWC and run unit tests"/>
        <echo message="asdoc             --&gt; Build tinytlf SWC, test, and generate asdocs"/>
        <echo message="package           --&gt; Build tinytlf SWC, test, and create release zip"/>
        <echo message="build-core        --&gt; Build tinytlf core SWC"/>
        <echo message="build-gestures    --&gt; Build tinytlf gestures SWC"/>
        <echo message="build-extensions  --&gt; Build tinytlf extensions SWC"/>
        <echo message="build-components  --&gt; Build tinytlf components SWC"/>
        <echo message="clean             --&gt; Remove all folders created by build script"/>
        <echo message="init              --&gt; Clean and create build folders"/>
        <echo message=""/>
    </target>
    <!-- Clean Build and Report files -->
    <target name="clean">
        <!-- Remove all directories created during the build process -->
        <echo>[clean] Removing Build and Report directories</echo>
        <delete includeemptydirs="true" failonerror="false">
            <fileset dir="${report.loc}" defaultexcludes="false">
                <include name="**/*"/>
            </fileset>
            <fileset dir="${dist.loc}" defaultexcludes="false">
                <include name="**/*"/>
            </fileset>
        </delete>
        <echo>[clean] Build and Report directories removed</echo>
    </target>
    <!-- Create directories needed for the build process -->
    <target name="init" depends="clean">
        <echo>[init] Creating Bin and Report directories</echo>
        <mkdir dir="${bin.loc}"/>
        <mkdir dir="${report.loc}"/>
        <echo>[init] Bin and Report directories created</echo>
    </target>

    <!-- Compile core SWC -->
    <target name="build-core" depends="init">
        <echo>[build-core] Compiling core release SWC</echo>
        <echo>[build-core] Using Flex SDK at: ${FLEX_HOME}</echo>
        <java jar="${FLEX_HOME}/lib/compc.jar" dir="${FLEX_HOME}/frameworks" fork="true" failonerror="true">
            <!-- Build our SWC with a versioned name. -->
            <arg value="-output=${bin.loc}/${project.name.versioned}-core.swc"/>
            <!-- We want all the org package classes in the SWC being built. -->
            <arg value="-include-sources=${core.src.loc}/org"/>
            <!-- Include classes from SWCs in this folder, but only the ones we use. -->
            <arg value="-library-path+=${lib.loc}"/>
            <!-- Generate a link report -->
            <arg value="-link-report=${project.name.versioned}_core_report.xml"/>
            <!-- Boolean mosh pit! -->
            <arg value="-incremental=true"/>
            <arg value="-static-link-runtime-shared-libraries=true"/>
            <arg value="-verbose-stacktraces=true"/>
            <arg value="-headless-server=true"/>
            <arg value="-keep-as3-metadata+=Event"/>
        </java>
    </target>

    <!-- Compile gestures SWC -->
    <target name="build-gestures" depends="build-core">
        <echo>[build-gestures] Compiling gestures release SWC</echo>
        <echo>[build-gestures] Using Flex SDK at: ${FLEX_HOME}</echo>
        <java jar="${FLEX_HOME}/lib/compc.jar" dir="${FLEX_HOME}/frameworks" fork="true" failonerror="true">
            <!-- Build our SWC with a versioned name. -->
            <arg value="-output=${bin.loc}/${project.name.versioned}-gestures.swc"/>
            <!-- We want all the org package classes in the SWC being built. -->
            <arg value="-include-sources=${gestures.src.loc}/org"/>
            <!-- Include classes from SWCs in this folder, but only the ones we use. -->
            <arg value="-library-path+=${lib.loc}"/>
            <arg value="-library-path+=${bin.loc}"/>
            <!-- Generate a link report -->
            <arg value="-link-report=${project.name.versioned}_gestures_report.xml"/>
            <!-- Boolean mosh pit! -->
            <arg value="-incremental=true"/>
            <arg value="-static-link-runtime-shared-libraries=true"/>
            <arg value="-verbose-stacktraces=true"/>
            <arg value="-headless-server=true"/>
            <arg value="-keep-as3-metadata+=Event"/>
        </java>
    </target>

    <!-- Compile extensions SWC -->
    <target name="build-extensions" depends="build-gestures">
        <echo>[build-extensions] Compiling extensions release SWC</echo>
        <echo>[build-extensions] Using Flex SDK at: ${FLEX_HOME}</echo>
        <java jar="${FLEX_HOME}/lib/compc.jar" dir="${FLEX_HOME}/frameworks" fork="true" failonerror="true">
            <!-- Build our SWC with a versioned name. -->
            <arg value="-output=${bin.loc}/${project.name.versioned}-extensions.swc"/>
            <!-- We want all the org package classes in the SWC being built. -->
            <arg value="-include-sources=${extensions.src.loc}/org"/>
            <!-- Include classes from SWCs in this folder, but only the ones we use. -->
            <arg value="-library-path+=${lib.loc}"/>
            <arg value="-library-path+=${bin.loc}"/>
            <!-- Generate a link report -->
            <arg value="-link-report=${project.name.versioned}_extensions_report.xml"/>
            <!-- Boolean mosh pit! -->
            <arg value="-incremental=true"/>
            <arg value="-static-link-runtime-shared-libraries=true"/>
            <arg value="-verbose-stacktraces=true"/>
            <arg value="-headless-server=true"/>
            <arg value="-keep-as3-metadata+=Event"/>
        </java>
    </target>

    <!-- Compile components SWC -->
    <target name="build-components" depends="build-extensions">
        <echo>[build-components] Compiling components release SWC</echo>
        <echo>[build-components] Using Flex SDK at: ${FLEX_HOME}</echo>
        <java jar="${FLEX_HOME}/lib/compc.jar" dir="${FLEX_HOME}/frameworks" fork="true" failonerror="true">
            <!-- Build our SWC with a versioned name. -->
            <arg value="-output=${bin.loc}/${project.name.versioned}-components.swc"/>
            <!-- We want all the org package classes in the SWC being built. -->
            <arg value="-include-sources=${components.src.loc}/org"/>
            <!-- Include classes from SWCs in this folder, but only the ones we use. -->
            <arg value="-library-path+=${lib.loc}"/>
            <arg value="-library-path+=${bin.loc}"/>
            <!-- Generate a link report -->
            <arg value="-link-report=${project.name.versioned}_components_report.xml"/>
            <!-- Boolean mosh pit! -->
            <arg value="-incremental=true"/>
            <arg value="-static-link-runtime-shared-libraries=true"/>
            <arg value="-verbose-stacktraces=true"/>
            <arg value="-headless-server=true"/>
            <arg value="-keep-as3-metadata+=Event"/>
        </java>
    </target>

    <!-- Build Documentation -->
    <target name="asdoc" depends="build-components">
        <echo>[asdoc] Generating ASDOC documentation</echo>
        <tstamp>
            <format property="docgen.time" pattern="MM/dd/yyyy hh:mm aa" unit="hour"/>
        </tstamp>
        <java jar="${FLEX_HOME}/lib/asdoc.jar" dir="${FLEX_HOME}/frameworks" fork="true" failonerror="true">
            <arg line="-external-library-path ${lib.loc}"/>
            <arg line="-doc-sources ${core.src.loc}"/>
            <arg line="-source-path ${core.src.loc}"/>
            <arg line="-doc-sources ${gestures.src.loc}"/>
            <arg line="-source-path ${gestures.src.loc}"/>
            <arg line="-doc-sources ${extensions.src.loc}"/>
            <arg line="-source-path ${extensions.src.loc}"/>
            <arg line="-doc-sources ${components.src.loc}"/>
            <arg line="-source-path ${components.src.loc}"/>
            <arg line="-output ${doc.loc}"/>
            <arg line="-window-title 'tinytlf ${tinytlf.ver.num}'"/>
            <arg line="-main-title 'tinytlf ${tinytlf.ver.num}'"/>
            <arg line="-footer 'tinytlf - http://www.tinytlf.org/ - Documentation generated at: ${docgen.time}'"/>
        </java>
        <echo>[asdoc] ASDOC documentation generated successfully</echo>
    </target>
    <!-- Package the Build -->
    <target name="package" depends="asdoc">
        <tstamp>
            <format property="touch.time" pattern="MM/dd/yyyy hh:mm aa" unit="hour"/>
        </tstamp>
        <!-- Assemble  -->
        <echo>[package] Packaging Release</echo>
        <mkdir dir="${dist.loc}"/>
        <mkdir dir="${dist.loc}/bin"/>
        <mkdir dir="${dist.loc}/src"/>
        <mkdir dir="${dist.loc}/libs"/>
        <copy file="${bin.loc}/${project.name.versioned}.swc" todir="${dist.loc}/bin"/>
        <copy todir="${dist.loc}/src/org">
            <fileset dir="${core.src.loc}/org"/>
            <fileset dir="${gestures.src.loc}/org"/>
            <fileset dir="${extensions.src.loc}/org"/>
            <fileset dir="${components.src.loc}/org"/>
        </copy>
        <copy todir="${dist.loc}/docs">
            <fileset dir="${doc.loc}"/>
        </copy>
        <!-- Copy README  -->
        <copy file="${template.loc}/README.tmpl" tofile="${dist.loc}/README" overwrite="true">
            <filterchain>
                <replacetokens>
                    <token key="date" value="${touch.time}"/>
                    <token key="ttlfversion" value="${tinytlf.ver.num}"/>
                    <token key="releasename" value="${project.name.versioned}"/>
                    <token key="ttlfprojectlink" value="${ttlf.project.link}"/>
                </replacetokens>
            </filterchain>
        </copy>
        <!-- Copy LICENSE  -->
        <copy file="LICENSE" tofile="${dist.loc}/LICENSE" overwrite="true"/>
        <!-- Zip It  -->
        <zip destfile="${dist.loc}/${project.name.versioned}.zip">
            <fileset dir="${dist.loc}"/>
        </zip>
        <!-- Clean Up  -->
        <delete file="${dist.loc}/${project.name.versioned}.swc"/>
        <delete file="${dist.loc}/README"/>
        <delete file="${dist.loc}/LICENSE"/>
        <delete dir="${dist.loc}/bin"/>
        <delete dir="${dist.loc}/src"/>
        <delete dir="${dist.loc}/libs"/>
        <delete dir="${dist.loc}/docs"/>
        <echo>[package] Release packaged successfully</echo>
    </target>
</project>